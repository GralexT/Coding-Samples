#BlueJ class context
comment0.target=DeckTest
comment0.text=\r\n\ @author\ Arran\ Stewart\r\n\r\n
comment1.params=
comment1.target=void\ setUp()
comment10.params=
comment10.target=void\ testAllDifferentSingleton()
comment10.text=\r\n\ Test\ method\ for\ {@link\ Deck\#allDifferent(int[])}.\r\n
comment11.params=
comment11.target=void\ testAllDifferentFalseDuple()
comment11.text=\r\n\ Test\ method\ for\ {@link\ Deck\#allDifferent(int[])}.\r\n
comment12.params=a
comment12.target=double\ log2(double)
comment12.text=\ log\ base\ 2\r\n
comment13.params=arr
comment13.target=double\ shannon(int[])
comment13.text=\r\n\ calculate\ Shannon\ entropy\ of\ distribution\r\n
comment14.params=
comment14.target=double\ shuffledEntropy()
comment15.params=
comment15.target=void\ testShuffle_low_grade()
comment15.text=\r\n\ Test\ method\ for\ {@link\ Deck\#shuffle()}.\r\n
comment16.params=
comment16.target=void\ testShuffle_medium_grade()
comment16.text=\r\n\ Test\ method\ for\ {@link\ Deck\#shuffle()}.\r\n
comment17.params=
comment17.target=void\ testShuffle_high_grade()
comment17.text=\r\n\ Test\ method\ for\ {@link\ Deck\#shuffle()}.\r\n
comment18.params=arr
comment18.target=java.lang.String\ joinArray(int[])
comment18.text=\ Join\ values\ in\ an\ array\ into\ a\ comma-separated\ string.\r\n
comment19.params=
comment19.target=void\ testShiftDownOne()
comment19.text=\r\n\ Test\ method\ for\ {@link\ Deck\#shiftDownOne(int)}.\r\n
comment2.params=d\ arr
comment2.target=void\ assertMatch(Deck,\ int[])
comment20.params=
comment20.target=void\ testTripleCut()
comment20.text=\r\n\ Test\ method\ for\ {@link\ Deck\#tripleCut(int,\ int)}.\r\n
comment21.params=
comment21.target=void\ testTripleCut_noChange()
comment21.text=\ When\ the\ whole\ deck\ constitutes\ the\ "middle",\r\n\ a\ triple\ cut\ makes\ no\ change.\r\n\ \r\n\ Test\ method\ for\ {@link\ Deck\#tripleCut(int,\ int)}.\r\n
comment22.params=
comment22.target=void\ testCountCut()
comment22.text=\ Test\ a\ "count\ cut".\r\n\ \r\n\ Test\ method\ for\ {@link\ Deck\#countCut(int)}.\r\n
comment23.params=
comment23.target=void\ testCountCut2()
comment23.text=\ Test\ a\ "count\ cut".\r\n\ \r\n\ Test\ method\ for\ {@link\ Deck\#countCut(int)}.\r\n
comment24.params=
comment24.target=void\ testDocExamples_shiftDownOne_1()
comment24.text=\ Test\ that\ example\ given\ in\ the\ documentation\ is\ correct.\r\n
comment25.params=
comment25.target=void\ testDocExamples_shiftDownOne_2()
comment25.text=\ Test\ that\ example\ given\ in\ the\ documentation\ is\ correct.\r\n
comment26.params=
comment26.target=void\ testDocExamples_tripleCut_1()
comment26.text=\ Test\ that\ example\ given\ in\ the\ documentation\ is\ correct.\r\n
comment27.params=
comment27.target=void\ testDocExamples_countCut()
comment27.text=\ Test\ that\ example\ given\ in\ the\ documentation\ is\ correct.\r\n
comment3.params=d\ list
comment3.target=void\ assertMatch(Deck,\ java.util.ArrayList)
comment4.params=
comment4.target=void\ testDeck()
comment4.text=\r\n\ Test\ method\ for\ {@link\ Deck\#Deck()}.\r\n
comment5.params=
comment5.target=void\ testDeckEmptyInput()
comment5.text=\r\n\ Test\ method\ for\ {@link\ Deck\#Deck()}.\r\n
comment6.params=
comment6.target=void\ testDeckSingletonInput()
comment6.text=\r\n\ Test\ method\ for\ {@link\ Deck\#Deck()}.\r\n
comment7.params=
comment7.target=void\ testDeckBadInput()
comment7.text=\r\n\ Test\ method\ for\ {@link\ Deck\#Deck()}.\r\n
comment8.params=
comment8.target=void\ testDeckGoodDupleInput()
comment9.params=
comment9.target=void\ testAllDifferentZeroLen()
comment9.text=\r\n\ Test\ method\ for\ {@link\ Deck\#allDifferent(int[])}.\r\n
numComments=28
